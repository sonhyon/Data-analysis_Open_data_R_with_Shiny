#13-2 데이터 전처리 1:지역 정보

#1단계: 집계구 만들기
library(sp)         
library(geojsonio)  

setwd(dirname(rstudioapi::getSourceEditorContext()$path)) 
getwd()
#dir.create("./01_save")
admin <- geojsonio::geojson_read("./SBJ_1910_001/tl_scco_emd.geojson", what = "sp")  
save(admin, file="./01_save/01_001_admin.rdata")    # 저장 
plot(admin)        

library(sp)
library(raster)
library(leaflet)

fishnet <- as(raster::extent(126.50625, 127.42245, 36.99653, 37.483419), "SpatialPolygons")
proj4string(fishnet) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
plot(fishnet, border="red")
plot(admin, add=T)

fishnet <- raster(fishnet)
res(fishnet) <- .01
crs(fishnet) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
fishnet <- rasterToPolygons(fishnet)
leaflet() %>% addTiles() %>%
  addPolygons(data = fishnet, weight = 0.4, fillOpacity = 0) %>%
  addPolygons(data = admin, color = "red")

fishnet$id
fishnet@data <- data.frame(id = 1:nrow(fishnet))
save(fishnet, file="./01_save/01_002_fishnet.rdata")
head(fishnet$id, 10)

#2단계: 정류장-버스노선 매핑 테이블 생성
sta_table <- read.csv("./SBJ_1910_001/stations_table.csv", fileEncoding = "UTF-8")
keeps <- c("표준정류장ID", "이비카드정류장ID", "WGS84위도", "WGS84경도", "시군명", "정류소명")
sta_table <- sta_table[keeps]
sta_table <- na.omit(sta_table)
save(sta_table, file="./01_save/01_003_sta_table.rdata")
rm("keeps")
head(sta_table, 2)

route_sta <- read.csv("./SBJ_1910_001/routestationinfo.csv", fileEncoding = "UTF-8")
keeps <- c("bus_line_no", "bus_line_no_seq", "station_id", "station_nm")
route_sta <- route_sta[keeps]
head(route_sta, 2)

route_sta <- merge(route_sta, sta_table, by.x="station_id", by.y="표준정류장ID")
sum(is.na(route_sta$정류소명))
save(route_sta, file="./01_save/01_004_route_sta.rdata") ; rm("keeps")
head(route_sta, 2)



#13-3. 데이터 전처리2: 교통 카드 데이터

#1단계: 개별 이동 데이터 생성
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
trip_chain <- read.csv("./SBJ_1910_001/TripChain.csv", fileEncoding = "UTF-8")
colnames(trip_chain) <-  
  c("암호화카드번호", "트랜잭션ID", "환승횟수", "교통카드발행사ID", "총이용객수", 
    "사용자구분", "교통수단CD1", "교통수단CD2", "교통수단CD3", "교통수단CD4", 
    "교통수단CD5", "버스노선ID1", "버스노선ID2", "버스노선ID3", "버스노선ID4", 
    "버스노선ID5", "차량ID1", "차량ID2", "차량ID3", "차량ID4", "차량ID5", 
    "총통행거리", "총탑승시간", "총소요시간", "승차일시1", "승차일시2", 
    "승차일시3",  "승차일시4", "승차일시5", "하차일시1", "하차일시2",  
    "하차일시3", "하차일시4", "하차일시5", "최초승차일시", "최종하차일시",
    "승차역ID1", "승차역ID2", "승차역ID3",  "승차역ID4", "승차역ID5", 
    "하차역ID1", "하차역ID2",  "하차역ID3", "하차역ID4", "하차역ID5", 
    "최초승차역ID", "최종하차역ID", "총이용금액", "수집건수", "트립체인완료코드")
colnames(trip_chain) 

options("scipen"=100)
trip_chain$start_day <- as.factor(as.numeric(substr(trip_chain[,35], 7, 8)))
trip_chain$start_day <- as.numeric(trip_chain$start_day)
trip_chain$start_hour <- as.factor(as.numeric(substr(trip_chain[,35], 9, 10)))
trip_chain$start_hour <- as.numeric(trip_chain$start_hour)
head(trip_chain[,c(1,52,53)], 2)

trip_chain$end_day <- as.factor(as.numeric(substr(trip_chain[,35], 7, 8)))
trip_chain$end_day <- as.numeric(trip_chain$end_day)
trip_chain$end_hour <- as.factor(as.numeric(substr(trip_chain[,35], 9, 10)))
trip_chain$end_hour <- as.numeric(trip_chain$end_hour)

save(trip_chain, file="./01_save/02_001_trip_chain_full.rdata")
head(trip_chain[,c(1,52,53,54,55)], 2)

#2단계: 개별 이동 + 정류장 정보 매핑
library(dplyr)
load("./01_save/01_003_sta_table.rdata")
colnames(sta_table) <-  c("표준정류장ID", "이비카드정류장ID", "S_WGS84위도", "S_WGS84경도","S_시군명", "S_정류소명") 
trip_chain <- merge(trip_chain, sta_table, by.x="승차역ID1", by.y="이비카드정류장ID")
sum(is.na(trip_chain$S_정류소명))        
# 버스 정류장 정보(sta_table) 컬럼 이름 변경
colnames(sta_table) <-  c("표준정류장ID", "이비카드정류장ID", "E_WGS84위도", "E_WGS84경도","E_시군명", "E_정류소명") 
# 도착점 기준 => 이비카드정류장 ID + station ID가 join 
trip_chain <- merge(trip_chain, sta_table, by.x = "최종하차역ID", by.y = "이비카드정류장ID") 
# 저장
save(trip_chain, file="./01_save/02_002_trip_chain_full.rdata") 
# 결측치 확인
sum(is.na(trip_chain$E_정류소명)) 

as.matrix(table(trip_chain$S_시군명, trip_chain$E_시군명))
sort(colSums(as.matrix(table(trip_chain$S_시군명, trip_chain$E_시군명))), decreasing = TRUE)
sort(rowSums(as.matrix(table(trip_chain$S_시군명, trip_chain$E_시군명))), decreasing = TRUE)

#3단계: 분석의 공간적 범위 결정: 승하차가 가장 많은 지역
trip_chain <- trip_chain[(trip_chain$S_시군명 == "화성시" | trip_chain$E_시군명 == "화성시"), ]
save(trip_chain, file="./01_save/02_003_trip_chain.rdata")
nrow(trip_chain)

OD <- as.matrix(table(trip_chain$S_시군명, trip_chain$E_시군명))
OD <- as.data.frame(OD)
OD <- OD[order(OD$Freq, decreasing=TRUE), ]
rownames(OD) <- 1:length(rownames(OD))
head(OD)

library(dplyr)
OD <- OD %>% mutate(cum = round(((cumsum((Freq))/sum(Freq))*100), 1))
colnames(OD) <- c("From", "To", "Freq", "Cum")
save(OD, file="./01_save/02_003_OD.rdata")
head(OD)

#install.packages("ineq")
library(ineq)
ineq(OD$Freq, type="Gini")
plot((OD$Freq), col="red", type='l', lwd=2)

patterns <- c("수원시","화성시","용인시","오산시")
colnames(sta_table) <- c("표준정류장ID", "이비카드정류장ID", "WGS84위도", "WGS84경도", "시군명", "정류소명")
sta_table <- filter(sta_table, grepl(paste(patterns, collapse = "|"), 시군명))
rownames(sta_table) <- seq(1:nrow(sta_table))
save(sta_table, file = "./01_save/02_003_sta_table.rdata")
unique(sta_table$시군명)



#13-4 기초분석1:노선별, 시간대별 이용량

#1단계: 노선대별, 시간대별 이용량 특성 분석
load("./01_save/02_003_trip_chain.rdata")
route_map <- read.csv("./SBJ_1910_001/routestationmapping.csv", fileEncoding = "UTF-8")
route_map <- route_map[,5:6]
route_sta <- merge(trip_chain, route_map, by.x="버스노선ID1", by.y="표준노선ID")
head(route_sta[1:2, c(4,66,60,65)])

route_sta$노선 <- as.character(route_sta$노선명)
bus_usr <- as.data.frame(table(route_sta$노선명))
bus_usr <- bus_usr[order(-bus_usr$Freq), ]
colnames(bus_usr) <- c("line", "Freq")
rownames(bus_usr) <- 1 : length(rownames(bus_usr))
bus_usr$pcnt = round(bus_usr$Freq / sum(bus_usr$Freq), 3) * 100
head(bus_usr[1:10,], 5)

bus_usr <- bus_usr %>% mutate(cum = round(((cumsum((Freq))/sum(Freq)) * 100), 1))
save(bus_usr, file="./01_save/03_001_bus_usr.rdata")
head(bus_usr[39:42,], 5)
plot(bus_usr$cum, type='l', xlim=c(0,100))
abline(v=42, col="red", lwd=3, lty=2)

hist <- hist(trip_chain$start_hour, plot = FALSE)
plot(hist, xaxt="n", xlab="시간", ylab="건수",
     main="시간대별 trip 발생량", col="blue")
axis(1, hist$mids, labels = c(5:23))

#2단계: 이용량 많은 버스노선 정류장
bus_line <- as.character(bus_usr[1:42, 1])
load("./01_save/01_004_route_sta.rdata")
bus_line <- filter(route_sta, grepl(paste(as.character(bus_line), collapse="|"), route_sta$bus_line_no))
patterns <- c("수원시", "화성시", "용인시", "오산시")
bus_line <- filter(bus_line, grepl(paste(patterns, collapse="|"), 시군명))
bus_line <- bus_line[!duplicated(bus_line[c(2,4)]),]
bus_line <- bus_line[with(bus_line, order(bus_line_no, bus_line_no_seq)), ]
bus_line <- merge(bus_line, bus_usr[1:42, 1:3], by.x="bus_line_no", by.y="line",all.x=TRUE)
bus_line <- na.omit(bus_line)
save(bus_line, file="./01_save/03_002_bus_line.rdata")
head(bus_line[,c(1,4,9)], 2)

#install.packages("tidyr")
library(tidyr)
library(sp)
coords <- bus_line %>% dplyr::select(WGS84경도, WGS84위도)
data <- bus_line[,1:11]
crs <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
sta_pnt <- SpatialPointsDataFrame(coords = coords, data= data, proj4string = crs)
save(sta_pnt, file="./01_save/03_003_sta_pnt.rdata")
library(tmap)
qtm("Hwaseong")
qtm("Hwaseong") +
  qtm(subset(sta_pnt, sta_pnt@data$pcnt > 1), symbols.col="cadetblue2", symbols.size=.05) +
  qtm(subset(sta_pnt, sta_pnt@data$pcnt > 2), symbols.col="burlywood3", symbols.size=.1) +
  qtm(subset(sta_pnt, sta_pnt@data$pcnt > 3), symbols.col="orange", symbols.size=.3) +
  qtm(subset(sta_pnt, sta_pnt@data$pcnt > 4), symbols.col="red", symbols.size=.5)

rm(list = ls())                   # 메모리 정리 
dev.off(dev.list()["RStudioGD"])  # 플롯창 정리


#13-5 기초 분석2:집계구별 이동 특성

#1단계: 집계구별 이동 계산
load("./01_save/02_003_trip_chain.rdata")
load("./01_save/01_002_fishnet.rdata")
load("./01_save/03_003_sta_pnt.rdata")
load("./01_save/01_001_admin.rdata")

library(sf)
sta_pnt <- st_as_sf(sta_pnt)                  # 정류장 위치 sp를 sf 객체로 변환
fishnet <- st_as_sf(fishnet)                  # 격자망      sp를 sf 객체로 변환
sta_pnt <- st_intersection(sta_pnt, fishnet)  # 해당 정류장 포인트(sta_pnt)가 몇번째 격자망(fishnet) 에 속하는지
# 추출하기 위하여 st_intersection 사용 (시간이 많이걸립니다. 커피 한잔 하시면서 기다리세요요)
sta_pnt <- as(sta_pnt, Class = "Spatial")     # 다시 sf형을 sp형으로 변환

# 저장 
save(sta_pnt, file="./01_save/04_001_sta_pnt.rdata") 
head(sta_pnt@data[, c(1, 4, 10, 12)], 2)    

rownames(trip_chain) <- seq(1:nrow(trip_chain)) 
trip_chain <- merge(trip_chain, sta_pnt@data[,c(5,12)], by.x = "승차역ID1", by.y = "이비카드정류장ID")
trip_chain <- merge(trip_chain, sta_pnt@data[,c(5,12)], by.x = "최종하차역ID", by.y = "이비카드정류장ID")
save(trip_chain, file="./01_save/04_002_trip_chain.rdata") 
tail(trip_chain[,c(3, 60, 65, 66, 67)], 2)

# (3) trip_chain에서 필요한 정보만 추출
# 필요한 정보만 추출하기 
keeps <- c( "id.x", "id.y", "승차역ID1", "최종하차역ID", "총이용객수", "환승횟수")  
grid_chain <- trip_chain[keeps]  
rm("trip_chain") ; rm("keeps")
save(grid_chain, file="./01_save/04_003_grid_chain.rdata") 
head(grid_chain, 2)

#---# 04-2_집계구별 출발 / 도착 이동량 특성 분석

# (1) 출발지 기준 총이용객수 / 평균환승횟수 fishnet 분석 
library(dplyr) # install.packages("dplyr")    
library(sp)    # install.packages("sp")
library(sf)    # install.packages("sf")
# 출발지 기준 fishnet 분석 
grid_in <- grid_chain %>%             
  group_by(id.x) %>%                  #  fishnet에서 id.x별로 총이용객수, 
  summarize_if(is.numeric, sum) %>%   # 환승횟수 데이터를 sum 하기 
  dplyr::select(id.x, 총이용객수, 환승횟수) 
# 평균환승횟수 계산 
grid_in$평균환승 <- round((grid_in$환승횟수 / grid_in$총이용객수),1)  
# 컬럼 이름 정리하기
colnames(grid_in) <- c("id", "총이용객수", "환승횟수", "평균환승")    
# s3(spatial polygon dataframe) => sf 포맷으로 변환
fishnet_2 <- as(fishnet,'sf')  
# fishnet_2 + "총이용객수", "환승횟수", "평균환승" 결합
fishnet_2 <- full_join(fishnet_2, grid_in, by = "id")  
# 저장
save(fishnet_2, file="./01_save/04_004_fishnet_2.rdata") 
head(fishnet_2, 2)

# (2) 출발지 기준 => "총이용객수", "환승횟수", "평균환승" 플로팅 

# 총이용객수
library(tmap)
tm_shape(fishnet_2) + tm_polygons("총이용객수", alpha = 0.6, border.col = "gray50", border.alpha = .2, colorNA = NULL) + 
  tm_shape(admin,  alpha = 0.1) + tm_borders() + tm_basemap("OpenStreetMap")

# 평균환승
tm_shape(fishnet_2) + tm_polygons("평균환승", alpha = 0.6, border.col = "gray50", border.alpha = .2, colorNA = NULL) + 
  tm_shape(admin,  alpha = 0.1) + tm_borders() + tm_basemap("OpenStreetMap")

# (3) 도착지 기준 총이용객수 / 평균환승횟수 fishnet 분석 
# 도착지 기준 fishnet 분석 
grid_out <- grid_chain %>%   
  group_by(id.y) %>%                 # grid에서 id.xy별로 총이용객수,  
  summarize_if(is.numeric, sum) %>%  # 환승횟수 데이터를 sum 하기 
  dplyr::select(id.y, 총이용객수, 환승횟수) 
# 평균환승횟수 계산 
grid_out$평균환승 <- round((grid_out$환승횟수 / grid_out$총이용객수),1) 
# 컬럼 이름 정리하기
colnames(grid_out) <- c("id", "총이용객수", "환승횟수", "평균환승")     
# sp => sf 포맷으로 변환
fishnet_2 <- as(fishnet,'sf')    
# fishnet_2 + "총이용객수", "환승횟수", "평균환승" 결합
fishnet_2 <- full_join(fishnet_2, grid_out, by = "id")
# 저장
save(fishnet_2, file="./01_save/04_005_fishnet_2.rdata") 
head(fishnet_2, 2)

# (4) 도착지 기준 => "총이용객수", "환승횟수", "평균환승" 플로팅 
# 총이용객수
library(tmap)
tm_shape(fishnet_2) + tm_polygons("총이용객수",  alpha = 0.6, border.col = "gray50", border.alpha = .2, colorNA = NULL) + 
  tm_shape(admin) + tm_borders() + tm_basemap("OpenStreetMap")   
# 평균환승
tm_shape(fishnet_2) + tm_polygons("평균환승", alpha = 0.6, border.col = "gray50", border.alpha = .2, colorNA = NULL) + 
  tm_shape(admin) + tm_borders() + tm_basemap("OpenStreetMap")

# (5) 정리
rm(list = ls())                   # 메모리 정리 
dev.off(dev.list()["RStudioGD"])  # 플롯창 정리


#--------------------------------
# 05_교통흐름 분석 1: 통근 시간대
#---------------------------------

#---# 05-1_통근 시간대 교통흐름(flow) 분석

# (1) 통근 시간대 데이터 필터링
# 파일 불러오기
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) 
load("./01_save/04_002_trip_chain.rdata")  
load("./01_save/04_001_sta_pnt.rdata")
load("./01_save/01_002_fishnet.Rdata")
load("./01_save/01_001_admin.rdata")
# 통근통행 필터링: 오전(7, 8, 9시), 오후(17, 18, 19시)
library(dplyr)
trip_cmt <-  trip_chain[grep("6|7|8|9|17|18|19", trip_chain$start_hour),]  
# trip_chain 번호 다시 매기기
rownames(trip_cmt) <- seq(1:nrow(trip_cmt))      
save(trip_cmt, file="./01_save/06_001_trip_cmt.rdata")     
# trip_chain에서 필요한 정보만 추출하기
keeps <- c( "id.x", "id.y", "승차역ID1", "최종하차역ID", "총이용객수", "환승횟수") 
grid_chain <- trip_cmt[keeps]  
save(grid_chain, file="./01_save/05_003_grid_chain.rdata") 
rm("trip_chain") ; rm("keeps")
head(grid_chain, 2)

# (2) 집계구 간(inter) 이동만 남기기 [집계구 내(intra) 이동 지우기]
# 그리드 간(inter) 이동만 남기기 [그리드 내(intra) 이동 지우기]
library(stplanr)  # install.packages("stplanr")
od_intra <- filter(grid_chain, id.x != id.y)  
# 그리드 간(intra) 이동별 총이용객수, 환승횟수 집계하기 
library(dplyr)
od_intra2 <- od_intra %>%   
  group_by(id.x, id.y) %>% 
  summarise_each(funs(sum)) %>% 
  dplyr::select(id.x, id.y, 총이용객수, 환승횟수)
# 평균환승횟수 계산 
od_intra2$평균환승 <- round((od_intra2$환승횟수 / od_intra2$총이용객수),1) 
# 컬럼 이름 정리하기
colnames(od_intra2) <- c("id.x", "id.y", "총이용객수", "환승횟수", "평균환승") 
head(od_intra2, 5)

# (3) 시각화 위하여 공간 데이터 형식(OD2LINE)으로 변경
# 공간 데이터 형식(OD2LINE) 만들기 
fishnet <- st_as_sf(fishnet)         # 격자망  sp를 sf 객체로 변환
od_line <- od2line(od_intra2, fishnet)   
# 이용자 수 20건 이상인 O-D 라인 필터링
od_line <- od_line[od_line$총이용객수 %in% 20:3000, ]  
# 저장
save(od_line, file="./01_save/05_003_od_line.rdata")  
# 총이용객수 시각화
library(tmap)
qtm("Hwaseong")
qtm("Hwaseong") +
  tm_basemap("OpenStreetMap") +
  qtm(subset(od_line, od_line$총이용객수 > 30), lines.col = "grey", lines.lwd = .3) +
  qtm(subset(od_line, od_line$총이용객수 > 100), lines.col = "blue", lines.alpha =.4, lines.lwd = 1) +
  qtm(subset(od_line, od_line$총이용객수 > 400), lines.col = "orange", lines.alpha =.6, lines.lwd = 2) +
  qtm(subset(od_line, od_line$총이용객수 > 1000), lines.col = "red", lines.alpha =.8, lines.lwd = 4)

# 커뮤니티 탐지 안됨
# (패키지의 community detection 기능 중 일부가 제거되어 해당 분석이 어렵습니다. 따라서 이 부분은 넘어가겠습니다.)

# (4) 정리
par(mfrow=c(1,1))                
rm(list = ls())                   # 메모리 정리 
dev.off(dev.list()["RStudioGD"])  # 플롯창 정리

#-----------------------------------
# 06_교통흐름 분석 2: 비통근 시간대
#------------------------------------  

#---# 06-1_비통근 시간대 교통흐름(flow) 분석

# (1) 비통근 시간대 필터링
# 파일 불러오기
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) 
load("./01_save/04_002_trip_chain.rdata")  
load("./01_save/04_001_sta_pnt.rdata")
load("./01_save/01_002_fishnet.Rdata")
load("./01_save/01_001_admin.rdata")
# 비통근통행 추출 (10~16시)
library(dplyr)
trip_cmt <-  trip_chain[grep("10|11|12|13|14|15|16", trip_chain$start_hour),] 
# trip_chain 번호 다시 매기기
rownames(trip_cmt) <- seq(1:nrow(trip_cmt))     
#비통근통행: 6.8만건 => 6.8 / 16.1(전체통행) => 약 42.2%
# 저장
save(trip_cmt, file="./01_save/07_001_trip_cmt.rdata") 
# 필요한 정보만 추출
keeps <- c( "id.x", "id.y", "승차역ID1", "최종하차역ID", "총이용객수", "환승횟수") # 
grid_chain <- trip_cmt[keeps]  
save(grid_chain, file="./01_save/07_001_grid_chain.rdata") 
rm("trip_chain") ; rm("keeps")
head(grid_chain, 2)

# (2) 집계구 간(inter) 이동만 남기기 [집계구 내(intra) 이동 지우기]
# inter 이동만 남기기(intra 이동 필터링)
library(stplanr)  # install.packages("stplanr")
od_intra <- filter(grid_chain, id.x != id.y)  
# 이동별 총이용객수, 환승횟수 집계하기 
library(dplyr)
od_intra2 <- od_intra %>%   
  group_by(id.x, id.y) %>% 
  summarise_each(funs(sum)) %>% 
  dplyr::select(id.x, id.y, 총이용객수, 환승횟수)
# 평균환승횟수 계산 
od_intra2$평균환승 <- round((od_intra2$환승횟수 / od_intra2$총이용객수),1) 
# 컬럼 이름 정리
colnames(od_intra2) <- c("id.x", "id.y", "총이용객수", "환승횟수", "평균환승") 
head(od_intra2, 2)

# (3) 시각화 위하여 공간 데이터 형식(OD2LINE)으로 변경
# 공간 데이터 형식(OD2LINE) 만들기 
fishnet <- st_as_sf(fishnet)         # 격자망  sp를 sf 객체로 변환
od_line <- od2line(od_intra2, fishnet)   
# 이용자 수 20건 이상인 O-D 라인 필터링
od_line <- od_line[od_line$총이용객수 %in% 20:3000, ]  
# 저장
save(od_line, file="./01_save/05_004_od_line.rdata")  
# 총이용객수 시각화
library(tmap)
qtm("Hwaseong") +
  tm_basemap("OpenStreetMap") +
  qtm(subset(od_line, od_line$총이용객수 > 30), lines.col = "grey", lines.lwd = .3) +
  qtm(subset(od_line, od_line$총이용객수 > 100), lines.col = "blue", lines.alpha =.4, lines.lwd = 1) +
  qtm(subset(od_line, od_line$총이용객수 > 400), lines.col = "orange", lines.alpha =.6, lines.lwd = 2) +
  qtm(subset(od_line, od_line$총이용객수 > 1000), lines.col = "red", lines.alpha =.8, lines.lwd = 4) 

# 커뮤니티 탐지 안됨
# (패키지의 community detection 기능 중 일부가 제거되어 해당 분석이 어렵습니다. 따라서 이 부분은 넘어가겠습니다.)

# (4) 정리
par(mfrow=c(1,1))                
rm(list = ls())                   # 메모리 정리 
dev.off(dev.list()["RStudioGD"])  # 플롯창 정리
